// <auto-generated />
using System;
using GarageBet.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;

namespace GarageBet.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180402090831_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview1-28290")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Database.MM.UserRole", b =>
                {
                    b.Property<long>("RoleId");

                    b.Property<long>("UserId");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("GarageBet.Domain.MM.ChampionshipMatch", b =>
                {
                    b.Property<long>("ChampionshipId");

                    b.Property<long>("MatchId");

                    b.HasKey("ChampionshipId", "MatchId");

                    b.HasIndex("MatchId");

                    b.ToTable("ChampionshipMatch");
                });

            modelBuilder.Entity("GarageBet.Domain.MM.ChampionshipTeam", b =>
                {
                    b.Property<long>("ChampionshipId");

                    b.Property<long>("TeamId");

                    b.HasKey("ChampionshipId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("ChampionshipTeam");
                });

            modelBuilder.Entity("GarageBet.Domain.Tables.Bet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<short>("AwayScore");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<short>("HomeScore");

                    b.Property<long?>("MatchId");

                    b.Property<DateTime>("UpdateAt");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("UserId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("GarageBet.Domain.Tables.Championship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompetitiveYear");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateAt");

                    b.HasKey("Id");

                    b.ToTable("Championships");
                });

            modelBuilder.Entity("GarageBet.Domain.Tables.Match", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<short>("AwayScore");

                    b.Property<long?>("AwayTeamId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("DateTime");

                    b.Property<short>("HomeScore");

                    b.Property<long?>("HomeTeamId");

                    b.Property<DateTime>("UpdateAt");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("GarageBet.Domain.Tables.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateAt");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("GarageBet.Domain.Tables.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdateAt");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("GarageBet.Domain.Tables.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<DateTime>("LastLogin");

                    b.Property<string>("LastName");

                    b.Property<long?>("RoleId");

                    b.Property<string>("Token");

                    b.Property<DateTime>("UpdateAt");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Database.MM.UserRole", b =>
                {
                    b.HasOne("GarageBet.Domain.Tables.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GarageBet.Domain.Tables.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GarageBet.Domain.MM.ChampionshipMatch", b =>
                {
                    b.HasOne("GarageBet.Domain.Tables.Championship", "Championship")
                        .WithMany("Matches")
                        .HasForeignKey("ChampionshipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GarageBet.Domain.Tables.Match", "Match")
                        .WithMany("Championships")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GarageBet.Domain.MM.ChampionshipTeam", b =>
                {
                    b.HasOne("GarageBet.Domain.Tables.Championship", "Championship")
                        .WithMany("Teams")
                        .HasForeignKey("ChampionshipId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GarageBet.Domain.Tables.Team", "Team")
                        .WithMany("Championships")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GarageBet.Domain.Tables.Bet", b =>
                {
                    b.HasOne("GarageBet.Domain.Tables.Match", "Match")
                        .WithMany("Bets")
                        .HasForeignKey("MatchId");

                    b.HasOne("GarageBet.Domain.Tables.User", "User")
                        .WithMany("Bets")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GarageBet.Domain.Tables.Match", b =>
                {
                    b.HasOne("GarageBet.Domain.Tables.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId");

                    b.HasOne("GarageBet.Domain.Tables.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId");
                });

            modelBuilder.Entity("GarageBet.Domain.Tables.User", b =>
                {
                    b.HasOne("GarageBet.Domain.Tables.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
